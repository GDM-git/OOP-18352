#include<iostream>
using namespace std;

enum Nucleotide {																										// Nucleotide
	A = 0b00000000,
	G = 0b00000001,
	C = 0b00000010,
	T = 0b00000011
};

class RNA {																												// Class RNA
private:
	size_t RNA_size;
	size_t* RNA_arr;
public:
	RNA() : RNA_size(0), RNA_arr(nullptr) {}																			// Constructor
	RNA(size_t size) : RNA_size(size) {																					// Constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = 0;
			}
		}
		else
			RNA_arr = nullptr;
	}
	RNA(const RNA & RNA_2) : RNA_size(RNA_2.RNA_size) {																	// Copy constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
	}
	~RNA() {																											// Destructor
		delete RNA_arr;
		RNA_arr = nullptr;
	}
	size_t size() { return RNA_size; }																					// Get size
	RNA & operator= (const RNA & RNA_2) {																				// Operator =
		RNA_size = RNA_2.RNA_size;
		delete RNA_arr;
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
	}
	Nucleotide & operator[] (const size_t & index) {
		Nucleotide a = A, g = G, c = C, t = T;
		switch ((RNA_arr[index / (sizeof(size_t) * 4)] >> (2 * (index % (sizeof(size_t) * 4)))) & 3)
		{
		case 0:
			return a;
		case 1:
			return g;
		case 2:
			return c;
		case 3:
			return t;
		default:
			break;
		}
	}
};

int main() {
	size_t i;
	RNA RNA_1, RNA_2(10);
	RNA_1 = RNA_2;
	for (i = 0; i < RNA_1.size; i++) {
		RNA_1[i] = G;
	}
	for (i = 0; i < RNA_1.size; i++) {
		cout << RNA_1[i];
	}
	return 0;
}
#include<iostream>
using namespace std;

enum Nucleotide {																										// Nucleotide
	A = 0b00000000,
	G = 0b00000001,
	C = 0b00000010,
	T = 0b00000011
};

class RNA {																												// Class RNA
	Nucleotide KOSTIL(size_t index) {
		Nucleotide a = A, g = G, c = C, t = T;
		switch ((RNA_arr[index / (sizeof(size_t) * 4)] >> (2 * (index % (sizeof(size_t) * 4)))) & 3)
		{
		case 0:
			return a;
		case 1:
			return g;
		case 2:
			return c;
		case 3:
			return t;
		default:
			break;
		}
	}
	friend class jab;
	class jab {																											// Class jab
	private:
		size_t jab_index;
		Nucleotide* jab_arr;
	public:
		jab() : jab_arr(nullptr), jab_index(0) {}																		// jab Constructor
		jab(RNA RNA_received, size_t index_byte) {																		// jab Constructor
			jab_index = index_byte;
			jab_arr = new Nucleotide[4];
			for (unsigned int i = 0; i < 4; i++) {
				jab_arr[i] = RNA_received.KOSTIL((jab_index - 1) * 4 + i);
			}
		}
		~jab() {																										// jab Destructor
			delete jab_arr;
			jab_arr = nullptr;
		}
		Nucleotide & operator[] (size_t index) {																		// jab Operator []
			return jab_arr[index];
		}
	};
private:
	size_t RNA_size;
	size_t* RNA_arr;
public:
	RNA() : RNA_size(0), RNA_arr(nullptr) {}																			// Constructor
	RNA(size_t size) : RNA_size(size) {																					// Constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = 0;
			}
		}
		else
			RNA_arr = nullptr;
	}
	RNA(const RNA& RNA_2) : RNA_size(RNA_2.RNA_size) {																	// Copy constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
	}
	~RNA() {																											// Destructor
		delete RNA_arr;
		RNA_arr = nullptr;
	}
	size_t & size() { return RNA_size; }																				// Get size
	RNA& operator= (const RNA& RNA_2) {																					// Operator =
		RNA_size = RNA_2.RNA_size;
		delete RNA_arr;
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / sizeof(size_t) / 4 + 1];
			for (unsigned int i = 0; i < ((RNA_size - 1) / (sizeof(int) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
		return *this;
	}
	Nucleotide & operator[] (const size_t& index) {																		// Operator []
		jab Nucl(*this, index / 4 + 1);
		return Nucl;
	}
};

int main() {																											// main
	size_t i;
	RNA RNA_1, RNA_2(10);
	RNA_1 = RNA_2;
	for (i = 0; i < RNA_1.size(); i++) {
		RNA_1[i] = G;
	}
	for (i = 0; i < RNA_1.size(); i++) {
		cout << RNA_1[i];
	}
	return 0;
}
