#pragma once
#include<iostream>
enum Nucleotide {																										// Nucleotide
	A = 0b00000000,
	G = 0b00000001,
	C = 0b00000010,
	T = 0b00000011
};

class RNA {																												// Class RNA
	friend class jab;
	class jab {																											// Class jab
	private:
		size_t jab_index;
		RNA* jab_RNA;
	public:
		jab(RNA* RNA_received, size_t index_nucleotide) {																// jab Constructor
			jab_index = index_nucleotide;
			jab_RNA = RNA_received;
		}
		jab& operator= (Nucleotide Nucleotide_add) {																	// jab Operator =
			jab_RNA->RNA_arr[jab_index / (sizeof(size_t) * 4)] = ((jab_RNA->RNA_arr[jab_index / (sizeof(size_t) * 4)]) & (~((size_t)3 << (2 * (jab_index % (sizeof(size_t) * 4)))))) | (Nucleotide_add << (2 * (jab_index % (sizeof(size_t) * 4))));
			return *this;
		}
		operator Nucleotide() const {																					// Nucleotide_type
			switch ((jab_RNA->RNA_arr[jab_index / (sizeof(size_t) * 4)] >> (2 * (jab_index % (sizeof(size_t) * 4)))) & 3)
			{
			case 0:
				return A;
			case 1:
				return G;
			case 2:
				return C;
			case 3:
				return T;
			}
		}
	};
private:
	size_t RNA_size;
	size_t* RNA_arr;
public:
	RNA() : RNA_size(0), RNA_arr(nullptr) {}																			// Constructor
	RNA(Nucleotide Nucl,size_t size) : RNA_size(size) {																	// Constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / (sizeof(size_t) * 4) + 1];
			for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
				RNA_arr[i] = 0;
				for (size_t j = 0; j < sizeof(size_t) * 4; j++) {
					RNA_arr[i] = RNA_arr[i] | (Nucl << (2 * j));
				}
			}
		}
		else
			RNA_arr = nullptr;
	}
	RNA(const RNA& RNA_2) : RNA_size(RNA_2.RNA_size) {																	// Copy constructor
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / (sizeof(size_t) * 4) + 1];
			for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
	}
	~RNA() {																											// Destructor
		delete[] RNA_arr;
		RNA_arr = nullptr;
	}
	size_t RNA_length() { return RNA_size; }																			// RNA_length
	RNA& operator= (const RNA& RNA_2) {																					// Operator =
		RNA_size = RNA_2.RNA_size;
		delete[] RNA_arr;
		if (RNA_size != 0) {
			RNA_arr = new size_t[(RNA_size - 1) / (sizeof(size_t) * 4) + 1];
			for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
				RNA_arr[i] = RNA_2.RNA_arr[i];
			}
		}
		else
			RNA_arr = nullptr;
		return *this;
	}
	jab operator[] (size_t index) {																						//* Operator []
		if (index <= RNA_size) {
			jab Nucl(this, index);
			return Nucl;
		}
		else {
			RNA RNA_new(A, index + 1);
			for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
				RNA_new.RNA_arr[i] = RNA_arr[i];
			}
			size_t past_size = RNA_size;
			//RNA_new.RNA_arr[(RNA_size - 1) / (sizeof(size_t) * 4)] = RNA_new.RNA_arr[(RNA_size - 1) / (sizeof(size_t) * 4)] & ();
			*this = RNA_new;
			for (size_t i = 0; i < sizeof(size_t) - past_size % (sizeof(size_t) * 4); i++) {
				jab corrective(this, past_size + 1 + i);
				corrective = A;
			}
			jab Nucl(this, index);
			return Nucl;
		}
	}
	Nucleotide operator[] (size_t index) const {																		// Operator []
		RNA RNA_new(*this);
		const jab Nucl(&RNA_new, index);
		return Nucl;
	}
	friend std::ostream& operator<< (std::ostream& out, const RNA& RNA) {												// Operator <<
		if (RNA.RNA_size == 0) {
			return out;
		}
		for (size_t i = 0; i < RNA.RNA_size; i++) {
			switch ((Nucleotide)RNA[i])
			{
			case A:
				out << "A";
				break;
			case G:
				out << "G";
				break;
			case C:
				out << "C";
				break;
			case T:
				out << "T";
				break;
			default:
				break;
			}
		}
		return out;
	}
	RNA operator! () const {																							// Operator !
		RNA RNA_new(*this);
		if (RNA_size != 0) {
			for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
				RNA_new.RNA_arr[i] = ~RNA_new.RNA_arr[i];
			}
		}
		return RNA_new;
	}
	bool operator== (const RNA& RNA_2) const {																			// Operator ==
		if (RNA_size == RNA_2.RNA_size) {
			if (RNA_size != 0) {
				bool answer = 1;
				for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
					if (RNA_arr[i] != RNA_2.RNA_arr[i]) {
						answer = 0;
						break;
					}
				}
				return answer;
			}
			else 
				return 1;
		}
		else 
			return 0;
	}
	bool operator!= (const RNA& RNA_2) const {																			// Operator !=
		if (RNA_size == RNA_2.RNA_size) {
			if (RNA_size != 0) {
				bool answer = 0;
				for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4) + 1); i++) {
					if (RNA_arr[i] != RNA_2.RNA_arr[i]) {
						answer = 1;
						break;
					}
				}
				return answer;
			}
			else
				return 0;
		}
		else
			return 1;
	}
	bool RNA_complementarity(const RNA& RNA_2) const{																	// RNA_complementarity
		if (*this == !RNA_2) {
			return 1;
		}
		else 
			return 0;
	}
	size_t RNA_cardinality(Nucleotide Nucl) const{																		// RNA_cardinality
		if (RNA_size != 0) {
			size_t register_nucl = 0;
			for (size_t i = 0; i < RNA_size; i++) {
				if (this->operator[](i) == Nucl) register_nucl++;
			}
			return register_nucl;
		}
		else 
			return 0;
	}
	RNA operator+ (const RNA& RNA_2) const{																				//* Operator +
		RNA RNA_new(A, RNA_size + RNA_2.RNA_size);
		if (RNA_new.RNA_size != 0) {
			size_t i = 0;
			for (; i < RNA_size; i++) {
				RNA_new[i] = this->operator[](i);
			}
			for (; i < RNA_size + RNA_2.RNA_size; i++) {
				RNA_new[i] = RNA_2[i - RNA_size];
			}
		}
		return RNA_new;
	}
	void RNA_trim(size_t last_index) {																					// RNA_trim
		if (last_index < RNA_size) {
			RNA_size = last_index;
			if (RNA_size != 0) {
				RNA RNA_new(*this);
				delete[] RNA_arr;
				RNA_arr = new size_t[(RNA_size - 1) / (sizeof(size_t) * 4) + 1];
				for (size_t i = 0; i < ((RNA_size - 1) / (sizeof(size_t) * 4)) + 1; i++) {
					RNA_arr[i] = RNA_new.RNA_arr[i];
				}
				if (last_index % (sizeof(size_t) * 4) != 0) {
					RNA_arr[(RNA_size - 1) / (sizeof(size_t) * 4)] = ((RNA_arr[(RNA_size - 1) / (sizeof(size_t) * 4)] << (2 * ((sizeof(size_t) * 4) - (last_index % (sizeof(size_t) * 4))))) >> (2 * ((sizeof(size_t) * 4) - (last_index % (sizeof(size_t) * 4)))));
				}
			}
			else
				RNA_arr = nullptr;
		}
	}
	RNA RNA_split(size_t last_index) const{																				// RNA_split
		if (last_index < RNA_size) {
			RNA RNA_new;
			RNA_new.RNA_size = RNA_size - last_index;
			RNA_new.RNA_arr = new size_t[(RNA_size - 1) / (sizeof(size_t) * 4) + 1];
			if (last_index % (sizeof(size_t) * 4) != 0) {
				for (size_t i = 0; i < (RNA_new.RNA_size - 1) / (sizeof(size_t) * 4) + 1; i++) {
					RNA_new.RNA_arr[i] = (RNA_arr[last_index / (sizeof(size_t) * 4) + i] >> (2 * (last_index % (sizeof(size_t) * 4)))) | (RNA_arr[last_index / (sizeof(size_t) * 4) + i + 1] << (2 * ((sizeof(size_t)) * 4 - last_index % (sizeof(size_t) * 4))));
				}
			}
			else {
				for (size_t i = 0; i < (RNA_new.RNA_size - 1) / (sizeof(size_t) * 4) + 1; i++) {
					RNA_new.RNA_arr[i] = RNA_arr[last_index / (sizeof(size_t) * 4) + i];
				}
			}
			return RNA_new;
		}
		else {
			RNA RNA_0;
			return RNA_0;
		}
	}
};
#include<iostream>
#include"Header.h"
using namespace std;

int main() {																											// main
	RNA RNA_1(A,7), RNA_2;
	RNA_1[4] = G;
	RNA_2 = !RNA_1;
	RNA_2[120] = A;
	cout << "Output RNA_1:\n" << RNA_1 << "\n___________________________________________________________________________________________\n";
	cout << "\nOutput 'RNA_2':\n" << RNA_2 << "\n___________________________________________________________________________________________\n";
	//cout << "\nOutput 'RNA_1 == RNA_2 ; RNA_1 != RNA_2':\n" << (RNA_1 == RNA_2) << " ; " << (RNA_1 != RNA_2) << "\n___________________________________________________________________________________________\n";
	//cout << "\nOutput 'RNA_1 + RNA_2':\n" << RNA_1 + RNA_2 << "\n___________________________________________________________________________________________\n";
	//cout << "\nOutput 'RNA_1.RNA_complementarity(RNA_2)':\n" << RNA_1.RNA_complementarity(RNA_2) << "\n___________________________________________________________________________________________\n";
	//cout << "\nOutput '(RNA_1 + RNA_2).RNA_cardinality(T)':\n" << (RNA_1 + RNA_2).RNA_cardinality(T) << "\n___________________________________________________________________________________________\n";
	//RNA_1.RNA_trim(5);
	//cout << "\nOutput 'RNA_1.RNA_trim(4)':\n" << RNA_1 << "\n___________________________________________________________________________________________\n";
	//cout << "\nOutput 'RNA_1.RNA_split()':\n" << RNA_2.RNA_split(3) << "\n___________________________________________________________________________________________\n";
	return 0;
}
